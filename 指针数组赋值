/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
//#include "test.h"
#include <stdio.h>
#include <stdlib.h>
/* Default timeout can be changed using clnt_control() */

/*static struct timeval TIMEOUT = { 25, 0 };

char **
test_1(char **argp, CLIENT *clnt)
{
	static char *clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, TEST,
		(xdrproc_t) xdr_wrapstring, (caddr_t) argp,
		(xdrproc_t) xdr_wrapstring, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}
*/
void fun()
{
	int **X;
	int i=0,j=0;

	X=(int **)malloc(sizeof(int *)*10);
	for(i=0;i<10;i++)
	{
		X[i]=(int *)malloc(sizeof(int )*100);
		for(j=0;j<100;j++)
		{
			if(i==0)
				X[i][j]=rand();
			else
			{
				X[i][j]=X[i-1][j]+1;
			}
			
		}
	}

	for(i=0;i<10;i++)
	{
		for(j=0;j<10;j++)
		{
			printf("%8d ",X[i][j]);
		}
		printf("\n");
	}

	for(i=0;i<10;i++)
	{
		free(X[i]);
	}
	free(X);
	
}
int main()
{
	 fun();
	 return 0;
}
